
/*
 *@file
 */

#pragma once

#include <vector>

#include "Constants.h"

class CSystem;

class CSystemManager
{

public:

//////////////////////////////////////////////////////////////////////
// Konstruktion/Destruktion
//////////////////////////////////////////////////////////////////////

	CSystemManager();
	CSystemManager(const CSystemManager& o);
	virtual ~CSystemManager(void);

	CSystemManager& operator=(const CSystemManager& o);

	void Reset();

//////////////////////////////////////////////////////////////////////
// Serialisierungsfunktionen
//////////////////////////////////////////////////////////////////////

	void Serialize(CArchive& ar);

//////////////////////////////////////////////////////////////////////
// getting info
//////////////////////////////////////////////////////////////////////

	bool Active() const;

//////////////////////////////////////////////////////////////////////
// setters
//////////////////////////////////////////////////////////////////////

	void Activate();
	void DeActivate();

//////////////////////////////////////////////////////////////////////
// other functions
//////////////////////////////////////////////////////////////////////

	bool DistributeWorkers(CSystem& system, const CPoint& p) const;

//////////////////////////////////////////////////////////////////////
// Members
//////////////////////////////////////////////////////////////////////

private:

	static const int PrioritiesCount = 7;
	bool m_bActive;
	std::vector<WORKER::Typ> m_PriorityList;

};
